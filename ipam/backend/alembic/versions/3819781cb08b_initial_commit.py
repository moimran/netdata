"""initial_commit

Revision ID: 3819781cb08b
Revises: 
Create Date: 2025-04-27 20:53:20.864498

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# Import the UUIDType and IPNetworkType directly here to avoid import issues
import sys
import os
# Add the backend directory to sys.path
backend_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, backend_dir)
# Now import the types
from app.types import UUIDType
from app.models.fields import IPNetworkType

# revision identifiers, used by Alembic.
revision = '3819781cb08b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('credentials',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('enable_password', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_credential_name'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_credentials_name'), 'credentials', ['name'], unique=False, schema='ipam')
    op.create_table('route_targets',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='ipam'
    )
    op.create_table('tenants',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('parent_tenant_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['parent_tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('platform_type',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('vendor', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('platform_signature', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('platform_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('command', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('ignore_platform', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='ni'
    )
    op.create_index(op.f('ix_ni_platform_type_platform_signature'), 'platform_type', ['platform_signature'], unique=True, schema='ni')
    op.create_index(op.f('ix_ni_platform_type_platform_type'), 'platform_type', ['platform_type'], unique=True, schema='ni')
    op.create_index(op.f('ix_ni_platform_type_slug'), 'platform_type', ['slug'], unique=False, schema='ni')
    op.create_index(op.f('ix_ni_platform_type_vendor'), 'platform_type', ['vendor'], unique=False, schema='ni')
    op.create_table('regions',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('parent_id', sa.Uuid(), nullable=True),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['ipam.regions.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_region_name'),
    schema='ipam'
    )
    op.create_table('rirs',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_private', sa.Boolean(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('roles',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('color', sqlmodel.sql.sqltypes.AutoString(length=6), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('site_groups',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('vrfs',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('rd', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('enforce_unique', sa.Boolean(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('rd'),
    schema='ipam'
    )
    op.create_table('net_jobs',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('job_uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('platform_type_id', sa.Uuid(), nullable=True),
    sa.Column('command_list', postgresql.ARRAY(sa.TEXT()), nullable=False),
    sa.Column('is_scheduled', sa.Boolean(), nullable=False),
    sa.Column('next_run', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('last_run', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('connection_protocol', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('connection_library', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('is_encrypted', sa.Boolean(), nullable=False),
    sa.Column('is_parse', sa.Boolean(), nullable=False),
    sa.Column('extra_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.ForeignKeyConstraint(['platform_type_id'], ['ni.platform_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='jobs'
    )
    op.create_index(op.f('ix_jobs_net_jobs_job_uuid'), 'net_jobs', ['job_uuid'], unique=True, schema='jobs')
    op.create_index(op.f('ix_jobs_net_jobs_slug'), 'net_jobs', ['slug'], unique=False, schema='jobs')
    op.create_table('aggregates',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prefix', IPNetworkType(), nullable=True),
    sa.Column('rir_id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['rir_id'], ['ipam.rirs.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('prefix', name='uq_aggregate'),
    schema='ipam'
    )
    op.create_table('asn_ranges',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('start', sa.BigInteger(), nullable=True),
    sa.Column('end', sa.BigInteger(), nullable=True),
    sa.Column('rir_id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['rir_id'], ['ipam.rirs.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_asn_range_name'),
    sa.UniqueConstraint('slug', name='uq_asn_range_slug'),
    schema='ipam'
    )
    op.create_table('ip_ranges',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('start_address', IPNetworkType(), nullable=True),
    sa.Column('end_address', IPNetworkType(), nullable=True),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'RESERVED', 'DEPRECATED', name='iprangestatusenum'), nullable=False),
    sa.Column('mark_utilized', sa.Boolean(), nullable=False),
    sa.Column('vrf_id', sa.Uuid(), nullable=True),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('start_address', 'end_address', 'vrf_id', name='uq_iprange_vrf'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_ip_ranges_end_address'), 'ip_ranges', ['end_address'], unique=False, schema='ipam')
    op.create_index(op.f('ix_ipam_ip_ranges_start_address'), 'ip_ranges', ['start_address'], unique=False, schema='ipam')
    op.create_table('sites',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('region_id', sa.Uuid(), nullable=True),
    sa.Column('site_group_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['region_id'], ['ipam.regions.id'], ),
    sa.ForeignKeyConstraint(['site_group_id'], ['ipam.site_groups.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('vrf_export_targets',
    sa.Column('vrf_id', sa.Uuid(), nullable=False),
    sa.Column('route_target_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['route_target_id'], ['ipam.route_targets.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('vrf_id', 'route_target_id'),
    schema='ipam'
    )
    op.create_table('vrf_import_targets',
    sa.Column('vrf_id', sa.Uuid(), nullable=False),
    sa.Column('route_target_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['route_target_id'], ['ipam.route_targets.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('vrf_id', 'route_target_id'),
    schema='ipam'
    )
    op.create_table('asns',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('number', sa.BigInteger(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('rir_id', sa.Uuid(), nullable=False),
    sa.Column('range_id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['range_id'], ['ipam.asn_ranges.id'], ),
    sa.ForeignKeyConstraint(['rir_id'], ['ipam.rirs.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('number', name='uq_asn_number'),
    sa.UniqueConstraint('slug', name='uq_asn_slug'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_asns_number'), 'asns', ['number'], unique=True, schema='ipam')
    op.create_table('locations',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('site_id', sa.Uuid(), nullable=True),
    sa.Column('parent_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['ipam.locations.id'], ),
    sa.ForeignKeyConstraint(['site_id'], ['ipam.sites.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('vlan_groups',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('min_vid', sa.Integer(), nullable=False),
    sa.Column('max_vid', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('site_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['site_id'], ['ipam.sites.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('vlans',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('vid', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'RESERVED', 'DEPRECATED', name='vlanstatusenum'), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('site_id', sa.Uuid(), nullable=True),
    sa.Column('group_id', sa.Uuid(), nullable=True),
    sa.Column('role_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['ipam.vlan_groups.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['ipam.roles.id'], ),
    sa.ForeignKeyConstraint(['site_id'], ['ipam.sites.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'group_id', name='uq_vlan_name_group'),
    sa.UniqueConstraint('name', 'site_id', name='uq_vlan_name_site'),
    sa.UniqueConstraint('vid', 'group_id', name='uq_vlan_vid_group'),
    sa.UniqueConstraint('vid', 'site_id', name='uq_vlan_vid_site'),
    schema='ipam'
    )
    op.create_table('device_inventory',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('hostname', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('platform_type_id', sa.Uuid(), nullable=True),
    sa.Column('connection_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('management_ip', IPNetworkType(), nullable=True),
    sa.Column('config_register', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('hardware', postgresql.ARRAY(sa.TEXT()), nullable=True),
    sa.Column('mac_address', postgresql.ARRAY(sa.TEXT()), nullable=True),
    sa.Column('serial', postgresql.ARRAY(sa.TEXT()), nullable=True),
    sa.Column('release', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('running_image', sa.TEXT(), nullable=True),
    sa.Column('restarted', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('reload_reason', sa.TEXT(), nullable=True),
    sa.Column('uptime_years', sa.Integer(), nullable=True),
    sa.Column('uptime_weeks', sa.Integer(), nullable=True),
    sa.Column('uptime_days', sa.Integer(), nullable=True),
    sa.Column('uptime_hours', sa.Integer(), nullable=True),
    sa.Column('uptime_minutes', sa.Integer(), nullable=True),
    sa.Column('ssh_handshake_time', sa.Integer(), nullable=True),
    sa.Column('site_id', sa.Uuid(), nullable=True),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('location_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['ipam.locations.id'], ),
    sa.ForeignKeyConstraint(['platform_type_id'], ['ni.platform_type.id'], ),
    sa.ForeignKeyConstraint(['site_id'], ['ipam.sites.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ni'
    )
    op.create_table('prefixes',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prefix', IPNetworkType(), nullable=True),
    sa.Column('status', sa.Enum('CONTAINER', 'ACTIVE', 'RESERVED', 'DEPRECATED', name='prefixstatusenum'), nullable=False),
    sa.Column('is_pool', sa.Boolean(), nullable=False),
    sa.Column('mark_utilized', sa.Boolean(), nullable=False),
    sa.Column('depth', sa.Integer(), nullable=False),
    sa.Column('child_count', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.Uuid(), nullable=True),
    sa.Column('site_id', sa.Uuid(), nullable=True),
    sa.Column('vrf_id', sa.Uuid(), nullable=True),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('vlan_id', sa.Uuid(), nullable=True),
    sa.Column('role_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['ipam.prefixes.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['ipam.roles.id'], ),
    sa.ForeignKeyConstraint(['site_id'], ['ipam.sites.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.ForeignKeyConstraint(['vlan_id'], ['ipam.vlans.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('prefix', 'vrf_id', name='uq_prefix_vrf'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_prefixes_parent_id'), 'prefixes', ['parent_id'], unique=False, schema='ipam')
    op.create_index(op.f('ix_ipam_prefixes_prefix'), 'prefixes', ['prefix'], unique=False, schema='ipam')
    op.create_table('arp_table',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ipv4_address', IPNetworkType(), nullable=True),
    sa.Column('mac_address', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.Column('ip_arp_age', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
    sa.Column('interface_name', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
    sa.Column('physical_interface', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
    sa.Column('interface_module', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
    sa.Column('arp_state', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
    sa.Column('ip_route_type', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
    sa.Column('vrf_name', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True),
    sa.Column('device_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['device_id'], ['ni.device_inventory.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ni'
    )
    op.create_table('interfaces',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('interface_name', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
    sa.Column('interface_status', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True),
    sa.Column('protocol_status', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True),
    sa.Column('operational_mode', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True),
    sa.Column('administrative_mode', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True),
    sa.Column('hardware_type', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.Column('mac_address', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.Column('bia', sqlmodel.sql.sqltypes.AutoString(length=14), nullable=False),
    sa.Column('media_type', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('ipv4_address', IPNetworkType(), nullable=True),
    sa.Column('subnet_mask', sqlmodel.sql.sqltypes.AutoString(length=24), nullable=True),
    sa.Column('ipv6_address', IPNetworkType(), nullable=True),
    sa.Column('virtual_ipv4_address', IPNetworkType(), nullable=True),
    sa.Column('mtu', sqlmodel.sql.sqltypes.AutoString(length=16), nullable=True),
    sa.Column('duplex', sqlmodel.sql.sqltypes.AutoString(length=16), nullable=True),
    sa.Column('speed', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('bandwidth', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('net_port_channel_id', sa.Integer(), nullable=True),
    sa.Column('group_number', sqlmodel.sql.sqltypes.AutoString(length=8), nullable=True),
    sa.Column('group_name', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True),
    sa.Column('native_vlan', sqlmodel.sql.sqltypes.AutoString(length=8), nullable=True),
    sa.Column('access_vlan', sqlmodel.sql.sqltypes.AutoString(length=8), nullable=True),
    sa.Column('voice_vlan', sqlmodel.sql.sqltypes.AutoString(length=8), nullable=True),
    sa.Column('switchport', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('switchport_monitor', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('trunking_vlans', sqlmodel.sql.sqltypes.AutoString(length=2048), nullable=True),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(length=8), nullable=True),
    sa.Column('preempt', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('active_router', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('active_virtual_mac', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('hsrp_router_state', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('configured_priority', sqlmodel.sql.sqltypes.AutoString(length=8), nullable=True),
    sa.Column('priority', sqlmodel.sql.sqltypes.AutoString(length=8), nullable=True),
    sa.Column('standby_router', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('standby_router_priority', sqlmodel.sql.sqltypes.AutoString(length=8), nullable=True),
    sa.Column('num_state_changes', sqlmodel.sql.sqltypes.AutoString(length=12), nullable=True),
    sa.Column('last_state_change', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('interface_zone', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('vrf_id', sa.Uuid(), nullable=True),
    sa.Column('device_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['device_id'], ['ni.device_inventory.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('interface_name', name='uq_interface_name'),
    schema='ni'
    )
    op.create_table('ip_addresses',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUIDType(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ipv4_address', IPNetworkType(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'RESERVED', 'DEPRECATED', 'DHCP', 'SLAAC', name='ipaddressstatusenum'), nullable=False),
    sa.Column('role', sa.Enum('LOOPBACK', 'SECONDARY', 'VIP', 'VRRP', 'HSRP', 'GLBP', 'ANYCAST', name='ipaddressroleenum'), nullable=True),
    sa.Column('dns_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prefix_id', sa.Uuid(), nullable=True),
    sa.Column('vrf_id', sa.Uuid(), nullable=True),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['prefix_id'], ['ipam.prefixes.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ipv4_address', 'vrf_id', name='uq_ipaddress_vrf'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_ip_addresses_ipv4_address'), 'ip_addresses', ['ipv4_address'], unique=False, schema='ipam')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ipam_ip_addresses_ipv4_address'), table_name='ip_addresses', schema='ipam')
    op.drop_table('ip_addresses', schema='ipam')
    op.drop_table('interfaces', schema='ni')
    op.drop_table('arp_table', schema='ni')
    op.drop_index(op.f('ix_ipam_prefixes_prefix'), table_name='prefixes', schema='ipam')
    op.drop_index(op.f('ix_ipam_prefixes_parent_id'), table_name='prefixes', schema='ipam')
    op.drop_table('prefixes', schema='ipam')
    op.drop_table('device_inventory', schema='ni')
    op.drop_table('vlans', schema='ipam')
    op.drop_table('vlan_groups', schema='ipam')
    op.drop_table('locations', schema='ipam')
    op.drop_index(op.f('ix_ipam_asns_number'), table_name='asns', schema='ipam')
    op.drop_table('asns', schema='ipam')
    op.drop_table('vrf_import_targets', schema='ipam')
    op.drop_table('vrf_export_targets', schema='ipam')
    op.drop_table('sites', schema='ipam')
    op.drop_index(op.f('ix_ipam_ip_ranges_start_address'), table_name='ip_ranges', schema='ipam')
    op.drop_index(op.f('ix_ipam_ip_ranges_end_address'), table_name='ip_ranges', schema='ipam')
    op.drop_table('ip_ranges', schema='ipam')
    op.drop_table('asn_ranges', schema='ipam')
    op.drop_table('aggregates', schema='ipam')
    op.drop_index(op.f('ix_jobs_net_jobs_slug'), table_name='net_jobs', schema='jobs')
    op.drop_index(op.f('ix_jobs_net_jobs_job_uuid'), table_name='net_jobs', schema='jobs')
    op.drop_table('net_jobs', schema='jobs')
    op.drop_table('vrfs', schema='ipam')
    op.drop_table('site_groups', schema='ipam')
    op.drop_table('roles', schema='ipam')
    op.drop_table('rirs', schema='ipam')
    op.drop_table('regions', schema='ipam')
    op.drop_index(op.f('ix_ni_platform_type_vendor'), table_name='platform_type', schema='ni')
    op.drop_index(op.f('ix_ni_platform_type_slug'), table_name='platform_type', schema='ni')
    op.drop_index(op.f('ix_ni_platform_type_platform_type'), table_name='platform_type', schema='ni')
    op.drop_index(op.f('ix_ni_platform_type_platform_signature'), table_name='platform_type', schema='ni')
    op.drop_table('platform_type', schema='ni')
    op.drop_table('tenants', schema='ipam')
    op.drop_table('route_targets', schema='ipam')
    op.drop_index(op.f('ix_ipam_credentials_name'), table_name='credentials', schema='ipam')
    op.drop_table('credentials', schema='ipam')
    # ### end Alembic commands ###
