"""Initial schema from current models

Revision ID: 880e86cb9029
Revises: 
Create Date: 2025-04-23 12:10:58.212652

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql
from app.models import fields

# revision identifiers, used by Alembic.
revision = '880e86cb9029'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Manually added schema creation
    op.execute("CREATE SCHEMA IF NOT EXISTS ipam")
    op.execute("CREATE SCHEMA IF NOT EXISTS ni")
    op.execute("CREATE SCHEMA IF NOT EXISTS jobs")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('credentials',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('enable_password', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_credential_name'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_credentials_name'), 'credentials', ['name'], unique=False, schema='ipam')
    op.create_table('regions',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['ipam.regions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_region_name'),
    schema='ipam'
    )
    op.create_table('rirs',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_private', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('roles',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('color', sqlmodel.sql.sqltypes.AutoString(length=6), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('route_targets',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_route_targets_slug'), 'route_targets', ['slug'], unique=False, schema='ipam')
    op.create_table('site_groups',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('tenants',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('comments', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('vlan_groups',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('min_vid', sa.Integer(), nullable=False),
    sa.Column('max_vid', sa.Integer(), nullable=False),
    sa.Column('vlan_id_ranges', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('platform_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('platform_signature', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('platform_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('command', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('ignore_platform', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='ni'
    )
    op.create_index(op.f('ix_ni_platform_type_name'), 'platform_type', ['name'], unique=False, schema='ni')
    op.create_index(op.f('ix_ni_platform_type_platform_signature'), 'platform_type', ['platform_signature'], unique=True, schema='ni')
    op.create_index(op.f('ix_ni_platform_type_platform_type'), 'platform_type', ['platform_type'], unique=True, schema='ni')
    op.create_index(op.f('ix_ni_platform_type_slug'), 'platform_type', ['slug'], unique=False, schema='ni')
    op.create_table('aggregates',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prefix', fields.IPNetworkType(), nullable=False),
    sa.Column('date_added', sa.Date(), nullable=True),
    sa.Column('rir_id', sa.Integer(), nullable=True),
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['rir_id'], ['ipam.rirs.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('prefix', name='uq_aggregate'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_aggregates_name'), 'aggregates', ['name'], unique=False, schema='ipam')
    op.create_index(op.f('ix_ipam_aggregates_prefix'), 'aggregates', ['prefix'], unique=False, schema='ipam')
    op.create_index(op.f('ix_ipam_aggregates_slug'), 'aggregates', ['slug'], unique=False, schema='ipam')
    op.create_table('asn_ranges',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('start', sa.Integer(), nullable=False),
    sa.Column('end', sa.Integer(), nullable=False),
    sa.Column('rir_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['rir_id'], ['ipam.rirs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('start', 'end', 'rir_id', name='uq_asnrange_rir'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_asn_ranges_name'), 'asn_ranges', ['name'], unique=False, schema='ipam')
    op.create_index(op.f('ix_ipam_asn_ranges_slug'), 'asn_ranges', ['slug'], unique=False, schema='ipam')
    op.create_table('asns',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('asn', sa.Integer(), nullable=False),
    sa.Column('rir_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['rir_id'], ['ipam.rirs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('asn'),
    schema='ipam'
    )
    op.create_table('sites',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('facility', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('physical_address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('contact_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('contact_email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('contact_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.Column('site_group_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['region_id'], ['ipam.regions.id'], ),
    sa.ForeignKeyConstraint(['site_group_id'], ['ipam.site_groups.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('vrfs',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('rd', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('enforce_unique', sa.Boolean(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('rd'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_vrfs_slug'), 'vrfs', ['slug'], unique=False, schema='ipam')
    op.create_table('net_jobs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('job_uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('platform_type_id', sa.Integer(), nullable=True),
    sa.Column('command_list', postgresql.ARRAY(sa.TEXT()), nullable=False),
    sa.Column('is_scheduled', sa.Boolean(), nullable=False),
    sa.Column('next_run', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('last_run', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('connection_protocol', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('connection_library', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('is_encrypted', sa.Boolean(), nullable=False),
    sa.Column('is_parse', sa.Boolean(), nullable=False),
    sa.Column('extra_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.ForeignKeyConstraint(['platform_type_id'], ['ni.platform_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='jobs'
    )
    op.create_index(op.f('ix_jobs_net_jobs_job_uuid'), 'net_jobs', ['job_uuid'], unique=True, schema='jobs')
    op.create_index(op.f('ix_jobs_net_jobs_slug'), 'net_jobs', ['slug'], unique=False, schema='jobs')
    op.create_table('device_inventory',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('device_uuid', sa.UUID(), nullable=False),
    sa.Column('platform_type_id', sa.Integer(), nullable=True),
    sa.Column('hostname', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('config_register', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('hardware', postgresql.ARRAY(sa.TEXT()), nullable=True),
    sa.Column('mac_address', postgresql.ARRAY(sa.TEXT()), nullable=True),
    sa.Column('release', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('reload_reason', sa.TEXT(), nullable=True),
    sa.Column('restarted', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('rommon', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('running_image', sa.TEXT(), nullable=True),
    sa.Column('serial', postgresql.ARRAY(sa.TEXT()), nullable=True),
    sa.Column('software_image', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('uptime_weeks', sa.Integer(), nullable=True),
    sa.Column('uptime_days', sa.Integer(), nullable=True),
    sa.Column('uptime_hours', sa.Integer(), nullable=True),
    sa.Column('uptime_minutes', sa.Integer(), nullable=True),
    sa.Column('uptime_years', sa.Integer(), nullable=True),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.ForeignKeyConstraint(['platform_type_id'], ['ni.platform_type.id'], ),
    sa.PrimaryKeyConstraint('device_uuid'),
    schema='ni'
    )
    op.create_index(op.f('ix_ni_device_inventory_device_uuid'), 'device_inventory', ['device_uuid'], unique=False, schema='ni')
    op.create_index(op.f('ix_ni_device_inventory_time'), 'device_inventory', ['time'], unique=False, schema='ni')
    op.create_table('ip_ranges',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('start_address', fields.IPNetworkType(), nullable=False),
    sa.Column('end_address', fields.IPNetworkType(), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'RESERVED', 'DEPRECATED', name='iprangestatusenum'), nullable=False),
    sa.Column('mark_utilized', sa.Boolean(), nullable=False),
    sa.Column('vrf_id', sa.Integer(), nullable=True),
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('start_address', 'end_address', 'vrf_id', name='uq_iprange_vrf'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_ip_ranges_end_address'), 'ip_ranges', ['end_address'], unique=False, schema='ipam')
    op.create_index(op.f('ix_ipam_ip_ranges_name'), 'ip_ranges', ['name'], unique=False, schema='ipam')
    op.create_index(op.f('ix_ipam_ip_ranges_slug'), 'ip_ranges', ['slug'], unique=False, schema='ipam')
    op.create_index(op.f('ix_ipam_ip_ranges_start_address'), 'ip_ranges', ['start_address'], unique=False, schema='ipam')
    op.create_table('locations',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('site_id', sa.Integer(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['ipam.locations.id'], ),
    sa.ForeignKeyConstraint(['site_id'], ['ipam.sites.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='ipam'
    )
    op.create_table('vlans',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('vid', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'RESERVED', 'DEPRECATED', name='vlanstatusenum'), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.Column('site_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['ipam.vlan_groups.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['ipam.roles.id'], ),
    sa.ForeignKeyConstraint(['site_id'], ['ipam.sites.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'group_id', name='uq_vlan_name_group'),
    sa.UniqueConstraint('name', 'site_id', name='uq_vlan_name_site'),
    sa.UniqueConstraint('vid', 'group_id', name='uq_vlan_vid_group'),
    sa.UniqueConstraint('vid', 'site_id', name='uq_vlan_vid_site'),
    schema='ipam'
    )
    op.create_table('vrf_export_targets',
    sa.Column('vrf_id', sa.Integer(), nullable=False),
    sa.Column('route_target_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['route_target_id'], ['ipam.route_targets.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('vrf_id', 'route_target_id'),
    schema='ipam'
    )
    op.create_table('vrf_import_targets',
    sa.Column('vrf_id', sa.Integer(), nullable=False),
    sa.Column('route_target_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['route_target_id'], ['ipam.route_targets.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('vrf_id', 'route_target_id'),
    schema='ipam'
    )
    op.create_table('prefixes',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prefix', fields.IPNetworkType(), nullable=False),
    sa.Column('status', sa.Enum('CONTAINER', 'ACTIVE', 'RESERVED', 'DEPRECATED', name='prefixstatusenum'), nullable=False),
    sa.Column('is_pool', sa.Boolean(), nullable=False),
    sa.Column('mark_utilized', sa.Boolean(), nullable=False),
    sa.Column('depth', sa.Integer(), nullable=False),
    sa.Column('child_count', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('site_id', sa.Integer(), nullable=True),
    sa.Column('vrf_id', sa.Integer(), nullable=True),
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.Column('vlan_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['ipam.prefixes.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['ipam.roles.id'], ),
    sa.ForeignKeyConstraint(['site_id'], ['ipam.sites.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.ForeignKeyConstraint(['vlan_id'], ['ipam.vlans.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('prefix', 'vrf_id', name='uq_prefix_vrf'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_prefixes_parent_id'), 'prefixes', ['parent_id'], unique=False, schema='ipam')
    op.create_index(op.f('ix_ipam_prefixes_prefix'), 'prefixes', ['prefix'], unique=False, schema='ipam')
    op.create_table('ip_addresses',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('address', fields.IPNetworkType(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'RESERVED', 'DEPRECATED', 'DHCP', 'SLAAC', name='ipaddressstatusenum'), nullable=False),
    sa.Column('role', sa.Enum('LOOPBACK', 'SECONDARY', 'VIP', 'VRRP', 'HSRP', 'GLBP', 'ANYCAST', name='ipaddressroleenum'), nullable=True),
    sa.Column('dns_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prefix_id', sa.Integer(), nullable=True),
    sa.Column('vrf_id', sa.Integer(), nullable=True),
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['prefix_id'], ['ipam.prefixes.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.ForeignKeyConstraint(['vrf_id'], ['ipam.vrfs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address', 'vrf_id', name='uq_ipaddress_vrf'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_ip_addresses_address'), 'ip_addresses', ['address'], unique=False, schema='ipam')
    op.create_table('devices',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('site_id', sa.Integer(), nullable=True),
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('ip_address_id', sa.Integer(), nullable=True),
    sa.Column('credential_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('fallback_credential_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['credential_name'], ['ipam.credentials.name'], ),
    sa.ForeignKeyConstraint(['fallback_credential_name'], ['ipam.credentials.name'], ),
    sa.ForeignKeyConstraint(['ip_address_id'], ['ipam.ip_addresses.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['ipam.locations.id'], ),
    sa.ForeignKeyConstraint(['site_id'], ['ipam.sites.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['ipam.tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_device_name'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_devices_slug'), 'devices', ['slug'], unique=False, schema='ipam')
    op.create_table('interfaces',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('ip_address_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['ipam.devices.id'], ),
    sa.ForeignKeyConstraint(['ip_address_id'], ['ipam.ip_addresses.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_interface_name'),
    schema='ipam'
    )
    op.create_index(op.f('ix_ipam_interfaces_slug'), 'interfaces', ['slug'], unique=False, schema='ipam')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ipam_interfaces_slug'), table_name='interfaces', schema='ipam')
    op.drop_table('interfaces', schema='ipam')
    op.drop_index(op.f('ix_ipam_devices_slug'), table_name='devices', schema='ipam')
    op.drop_table('devices', schema='ipam')
    op.drop_index(op.f('ix_ipam_ip_addresses_address'), table_name='ip_addresses', schema='ipam')
    op.drop_table('ip_addresses', schema='ipam')
    op.drop_index(op.f('ix_ipam_prefixes_prefix'), table_name='prefixes', schema='ipam')
    op.drop_index(op.f('ix_ipam_prefixes_parent_id'), table_name='prefixes', schema='ipam')
    op.drop_table('prefixes', schema='ipam')
    op.drop_table('vrf_import_targets', schema='ipam')
    op.drop_table('vrf_export_targets', schema='ipam')
    op.drop_table('vlans', schema='ipam')
    op.drop_table('locations', schema='ipam')
    op.drop_index(op.f('ix_ipam_ip_ranges_start_address'), table_name='ip_ranges', schema='ipam')
    op.drop_index(op.f('ix_ipam_ip_ranges_slug'), table_name='ip_ranges', schema='ipam')
    op.drop_index(op.f('ix_ipam_ip_ranges_name'), table_name='ip_ranges', schema='ipam')
    op.drop_index(op.f('ix_ipam_ip_ranges_end_address'), table_name='ip_ranges', schema='ipam')
    op.drop_table('ip_ranges', schema='ipam')
    op.drop_index(op.f('ix_ni_device_inventory_time'), table_name='device_inventory', schema='ni')
    op.drop_index(op.f('ix_ni_device_inventory_device_uuid'), table_name='device_inventory', schema='ni')
    op.drop_table('device_inventory', schema='ni')
    op.drop_index(op.f('ix_jobs_net_jobs_slug'), table_name='net_jobs', schema='jobs')
    op.drop_index(op.f('ix_jobs_net_jobs_job_uuid'), table_name='net_jobs', schema='jobs')
    op.drop_table('net_jobs', schema='jobs')
    op.drop_index(op.f('ix_ipam_vrfs_slug'), table_name='vrfs', schema='ipam')
    op.drop_table('vrfs', schema='ipam')
    op.drop_table('sites', schema='ipam')
    op.drop_table('asns', schema='ipam')
    op.drop_index(op.f('ix_ipam_asn_ranges_slug'), table_name='asn_ranges', schema='ipam')
    op.drop_index(op.f('ix_ipam_asn_ranges_name'), table_name='asn_ranges', schema='ipam')
    op.drop_table('asn_ranges', schema='ipam')
    op.drop_index(op.f('ix_ipam_aggregates_slug'), table_name='aggregates', schema='ipam')
    op.drop_index(op.f('ix_ipam_aggregates_prefix'), table_name='aggregates', schema='ipam')
    op.drop_index(op.f('ix_ipam_aggregates_name'), table_name='aggregates', schema='ipam')
    op.drop_table('aggregates', schema='ipam')
    op.drop_index(op.f('ix_ni_platform_type_slug'), table_name='platform_type', schema='ni')
    op.drop_index(op.f('ix_ni_platform_type_platform_type'), table_name='platform_type', schema='ni')
    op.drop_index(op.f('ix_ni_platform_type_platform_signature'), table_name='platform_type', schema='ni')
    op.drop_index(op.f('ix_ni_platform_type_name'), table_name='platform_type', schema='ni')
    op.drop_table('platform_type', schema='ni')
    op.drop_table('vlan_groups', schema='ipam')
    op.drop_table('tenants', schema='ipam')
    op.drop_table('site_groups', schema='ipam')
    op.drop_index(op.f('ix_ipam_route_targets_slug'), table_name='route_targets', schema='ipam')
    op.drop_table('route_targets', schema='ipam')
    op.drop_table('roles', schema='ipam')
    op.drop_table('rirs', schema='ipam')
    op.drop_table('regions', schema='ipam')
    op.drop_index(op.f('ix_ipam_credentials_name'), table_name='credentials', schema='ipam')
    op.drop_table('credentials', schema='ipam')
    op.execute("DROP SCHEMA IF EXISTS jobs")
    op.execute("DROP SCHEMA IF EXISTS ni")
    op.execute("DROP SCHEMA IF EXISTS ipam")
    # ### end Alembic commands ###
