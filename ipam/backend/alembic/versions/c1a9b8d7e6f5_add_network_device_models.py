"""Add network device models

Revision ID: c1a9b8d7e6f5
Revises: 7355bbe789de
Create Date: 2025-04-22 23:25:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'c1a9b8d7e6f5'
down_revision: Union[str, None] = '7355bbe789de' # Use the identified merge head
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create platform_type table
    op.create_table('platform_type',
        sa.Column('id', sa.Integer(), nullable=False),
        # BaseModel fields
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('slug', sa.String(), nullable=True),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True), # Match Optional[datetime]
        # Specific fields
        sa.Column('platform_signature', sa.String(length=100), nullable=False),
        sa.Column('platform_type', sa.String(length=100), nullable=False),
        sa.Column('command', sa.String(length=100), nullable=True),
        sa.Column('ignore_platform', sa.Boolean(), nullable=False, server_default=sa.false()),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('platform_signature'),
        sa.UniqueConstraint('platform_type')
    )
    op.create_index(op.f('ix_platform_type_platform_signature'), 'platform_type', ['platform_signature'], unique=True)
    op.create_index(op.f('ix_platform_type_platform_type'), 'platform_type', ['platform_type'], unique=True)
    op.create_index(op.f('ix_platform_type_slug'), 'platform_type', ['slug'], unique=False) # Add index for slug
    op.create_index(op.f('ix_platform_type_name'), 'platform_type', ['name'], unique=False) # Add index for name if needed

    # Create net_jobs table
    op.create_table('net_jobs',
        sa.Column('id', sa.Integer(), nullable=False),
        # BaseModel fields (name is job_name, slug/description are Optional)
        sa.Column('slug', sa.String(), nullable=True),
        sa.Column('description', sa.String(), nullable=True),
        # Specific fields
        sa.Column('job_uuid', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('platform_type_id', sa.Integer(), nullable=True),
        sa.Column('job_name', sa.String(length=100), nullable=False), # Corresponds to 'name' in BaseModel
        sa.Column('command_list', postgresql.ARRAY(sa.TEXT()), nullable=False),
        sa.Column('is_scheduled', sa.Boolean(), nullable=False, server_default=sa.false()),
        sa.Column('schedule_interval', postgresql.INTERVAL(), nullable=True),
        sa.Column('next_run', postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column('last_run', postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column('connection_protocol', sa.String(length=50), nullable=False, server_default='ssh'),
        sa.Column('connection_library', sa.String(length=50), nullable=False, server_default='NETMIKO'),
        sa.Column('is_encrypted', sa.Boolean(), nullable=False, server_default=sa.false()),
        sa.Column('is_parse', sa.Boolean(), nullable=False, server_default=sa.true()),
        sa.Column('extra_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('status', sa.String(length=50), nullable=False, server_default='ACTIVE'),
        sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True), # Match Optional[datetime]
        sa.ForeignKeyConstraint(['platform_type_id'], ['platform_type.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('job_uuid')
    )
    op.create_index(op.f('ix_net_jobs_job_uuid'), 'net_jobs', ['job_uuid'], unique=True)
    op.create_index(op.f('ix_net_jobs_slug'), 'net_jobs', ['slug'], unique=False) # Add index for slug
    # No separate index needed for job_name if it maps to BaseModel's name which isn't indexed by default here

    # Create update timestamp function
    op.execute("""
        CREATE OR REPLACE FUNCTION update_modified_column()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated_at = NOW();
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    # Create trigger for net_jobs
    op.execute("""
        CREATE TRIGGER update_net_jobs_modtime
        BEFORE UPDATE ON net_jobs
        FOR EACH ROW
        EXECUTE FUNCTION update_modified_column();
    """)

    # Create device_inventory table
    op.create_table('device_inventory',
        sa.Column('time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('device_uuid', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('platform_type_id', sa.Integer(), nullable=True),
        sa.Column('hostname', sa.String(length=255), nullable=True),
        sa.Column('config_register', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('hardware', postgresql.ARRAY(sa.TEXT()), nullable=True),
        sa.Column('mac_address', postgresql.ARRAY(sa.TEXT()), nullable=True),
        sa.Column('release', sa.String(length=50), nullable=True),
        sa.Column('reload_reason', sa.TEXT(), nullable=True),
        sa.Column('restarted', postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column('rommon', sa.String(length=100), nullable=True),
        sa.Column('running_image', sa.TEXT(), nullable=True),
        sa.Column('serial', postgresql.ARRAY(sa.TEXT()), nullable=True),
        sa.Column('software_image', sa.String(length=255), nullable=True),
        sa.Column('uptime_weeks', sa.Integer(), nullable=True),
        sa.Column('uptime_days', sa.Integer(), nullable=True),
        sa.Column('uptime_hours', sa.Integer(), nullable=True),
        sa.Column('uptime_minutes', sa.Integer(), nullable=True),
        sa.Column('uptime_years', sa.Integer(), nullable=True),
        sa.Column('version', sa.String(length=100), nullable=True),
        sa.ForeignKeyConstraint(['platform_type_id'], ['platform_type.id'], ),
        sa.PrimaryKeyConstraint('device_uuid') # Use device_uuid as PK as per original SQL
    )
    # Index time column as required by TimescaleDB hypertable creation
    op.create_index(op.f('ix_device_inventory_time'), 'device_inventory', ['time'], unique=False)
    # Index device_uuid as it's the primary key
    op.create_index(op.f('ix_device_inventory_device_uuid'), 'device_inventory', ['device_uuid'], unique=True)

    # Convert device_inventory to hypertable using raw SQL
    op.execute("SELECT create_hypertable('device_inventory', 'time', if_not_exists => TRUE, chunk_time_interval => interval '7 days');")

    # Create the specific DESC index using raw SQL
    op.execute("CREATE INDEX ix_device_inventory_device_uuid_time_desc ON device_inventory (device_uuid, time DESC);")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop the specific DESC index first
    op.execute("DROP INDEX IF EXISTS ix_device_inventory_device_uuid_time_desc;")

    # Drop trigger and function
    op.execute("DROP TRIGGER IF EXISTS update_net_jobs_modtime ON net_jobs;")
    op.execute("DROP FUNCTION IF EXISTS update_modified_column();")

    # Drop tables (order is important due to foreign keys)
    op.drop_index(op.f('ix_device_inventory_device_uuid'), table_name='device_inventory')
    op.drop_index(op.f('ix_device_inventory_time'), table_name='device_inventory')
    op.drop_table('device_inventory') # Dropping the table implicitly removes the hypertable nature

    op.drop_index(op.f('ix_net_jobs_job_uuid'), table_name='net_jobs')
    op.drop_index(op.f('ix_net_jobs_slug'), table_name='net_jobs')
    op.drop_table('net_jobs')

    op.drop_index(op.f('ix_platform_type_platform_type'), table_name='platform_type')
    op.drop_index(op.f('ix_platform_type_platform_signature'), table_name='platform_type')
    op.drop_index(op.f('ix_platform_type_slug'), table_name='platform_type')
    op.drop_index(op.f('ix_platform_type_name'), table_name='platform_type')
    op.drop_table('platform_type')

    # ### end Alembic commands ###
