"""
Custom script to generate an alembic migration file with correct imports
"""
import os
import re
import sys
from datetime import datetime

# Template for the migration file with correct imports
MIGRATION_TEMPLATE = """\"\"\"initial_commit

Revision ID: {revision}
Revises: 
Create Date: {date}

\"\"\"
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql
from app.models.fields import IPNetworkType  # Add the correct import here

# revision identifiers, used by Alembic.
revision = '{revision}'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Import commands will be generated by alembic
    pass


def downgrade() -> None:
    # Import commands will be generated by alembic
    pass
"""

def generate_random_revision():
    """Generate a random revision ID similar to alembic's format"""
    import random
    import string
    return ''.join(random.choices(string.hexdigits.lower(), k=12))

def main():
    """Create a migration file with the correct imports"""
    # Generate a random revision ID
    revision = generate_random_revision()
    
    # Get current date in alembic format
    now = datetime.now()
    date_str = now.strftime("%Y-%m-%d %H:%M:%S.%f")
    
    # Create migration content
    migration_content = MIGRATION_TEMPLATE.format(
        revision=revision,
        date=date_str
    )
    
    # Create the migration file in the alembic versions directory
    os.makedirs('alembic/versions', exist_ok=True)
    migration_file = f'alembic/versions/{revision}_initial_commit.py'
    
    with open(migration_file, 'w') as f:
        f.write(migration_content)
    
    print(f"Created migration file: {migration_file}")
    print("Now run 'alembic revision --autogenerate' to populate the file with database changes")
    print("Then run 'alembic upgrade head' to apply the migration")

if __name__ == "__main__":
    main() 